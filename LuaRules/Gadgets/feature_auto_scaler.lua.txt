--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
if not gadgetHandler:IsSyncedCode() then
	return
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

function gadget:GetInfo()
	return {
		name      = "Feature Size Changer",
		desc      = "Changes the sizes of feature so their centre of mass may be seen.",
		author    = "XNTEABDSC, GoogleFrog",
		date      = "",
		license   = "GNU GPL, v2 or later",
		layer     = -10000,
		enabled   = true,  --  loaded by default?
	}
end

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

local NULL_PIECE = "[null]"
local origPieceTable = {}

VFS.Include("LuaRules/Utilities/tablefunctions.lua")
local suCopyTable = Spring.Utilities.CopyTable

VFS.Include("LuaRules/Utilities/to_make_op_things.lua")
local utils=Spring.Utilities.to_make_op_things

local spGetFeatureDefID=Spring.GetFeatureDefID
local spSetFeaturePieceMatrix=Spring.SetFeaturePieceMatrix -- don't exist
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

local function SetScale(featureID,fdid, base, scale)
	local pieceTable = suCopyTable(origPieceTable[fdid])

	pieceTable[1] = pieceTable[1] * scale
	pieceTable[2] = pieceTable[2] * scale
	pieceTable[3] = pieceTable[3] * scale

	pieceTable[5] = pieceTable[5] * scale
	pieceTable[6] = pieceTable[6] * scale
	pieceTable[7] = pieceTable[7] * scale

	pieceTable[9] = pieceTable[9] * scale
	pieceTable[10] = pieceTable[10] * scale
	pieceTable[11] = pieceTable[11] * scale

	pieceTable[13] = pieceTable[13] * scale
	pieceTable[14] = pieceTable[14] * scale
	pieceTable[15] = pieceTable[15] * scale

	spSetFeaturePieceMatrix(featureID, base, pieceTable)
end
local spGetFeaturePieceList=Spring.GetFeaturePieceList
local spGetFeaturePieceInfo=Spring.GetFeaturePieceInfo
local function FindBase(unitID)
	local pieces = spGetFeaturePieceList(unitID)
	for pieceNum = 1, #pieces do
		if spGetFeaturePieceInfo(unitID, pieceNum).parent == NULL_PIECE then
			return pieceNum
		end
	end
end

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
local spGetFeaturePieceMatrix=Spring.GetFeaturePieceMatrix
local function FeatureScale(featureID,fdId, scale)
    local base = FindBase(featureID)
    if base then
		if not origPieceTable[fdId] then
			origPieceTable[fdId] = {spGetFeaturePieceMatrix(featureID, base)}
		end

        SetScale(featureID,fdId, base, scale)
    end
end

local featureScaleInfo={}

function gadget:Initialize()
	--Spring.Echo("I LOAD IT")
    GG.FeatureScale = FeatureScale
    for fdid, fd in pairs(FeatureDefs) do
        local udname,_=utils.string_a_b( fd.name)
        if udname and UnitDefNames[udname] then
            local ud=UnitDefNames[udname]
            if ud.customParams and ud.customParams.def_scale then
                local scale=tonumber (ud.customParams.def_scale)
                featureScaleInfo[fdid]={
                    scale=scale
                }
            end
        end
    end
end

function gadget:FeatureCreated(featureID, allyTeamID)
    local fdid=spGetFeatureDefID(featureID)
    if featureScaleInfo[fdid] then
        FeatureScale(featureID,fdid,featureScaleInfo[fdid].scale)
    end
end
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------