function widget:GetInfo()
	return {
		name      = "Draw Unit Capture",
		desc      = "Draw lines between controller an controliee",
		author    = "from unit_capture.lua, Google Frog",
		date      = "30/9/2010", --2013 May 12
		license   = "GNU GPL, v2 or later",
		layer     = 0, -- above gui_selectedunits_gl4, below gui_name_tags 
		enabled   = true  --  loaded by default?
	}
end


local spGetUnitPosition     = Spring.GetUnitPosition
local spGetUnitLosState     = Spring.GetUnitLosState
local spValidUnitID         = Spring.ValidUnitID
local spGetMyAllyTeamID     = Spring.GetMyAllyTeamID
local spGetGameFrame        = Spring.GetGameFrame
local spGetSpectatingState  = Spring.GetSpectatingState
local spGetUnitRulesParam   = Spring.GetUnitRulesParam
local spGetUnitVectors      = Spring.GetUnitVectors

local glVertex      = gl.Vertex
local glPushAttrib  = gl.PushAttrib
local glLineStipple = gl.LineStipple
local glDepthTest   = gl.DepthTest
local glLineWidth   = gl.LineWidth
local glColor       = gl.Color
local glBeginEnd    = gl.BeginEnd
local glPopAttrib   = gl.PopAttrib
local glCreateList  = gl.CreateList
local glCallList    = gl.CallList
local glDeleteList  = gl.DeleteList
local GL_LINES      = GL.LINES

local myTeam = spGetMyAllyTeamID()

local drawingUnits = {}
local unitCount = 0

local drawList = 0
local drawAnything = false

local function DrawBezierCurve(pointA, pointB, pointC, pointD, amountOfPoints)
	local step = 1/amountOfPoints
	glVertex (pointA[1], pointA[2], pointA[3])
	local px, py, pz
	for i = 0, 1, step do
		local x = pointA[1]*((1-i)^3) + pointB[1]*(3*i*(1-i)^2) + pointC[1]*(3*i*i*(1-i)) + pointD[1]*(i*i*i)
		local y = pointA[2]*((1-i)^3) + pointB[2]*(3*i*(1-i)^2) + pointC[2]*(3*i*i*(1-i)) + pointD[2]*(i*i*i)
		local z = pointA[3]*((1-i)^3) + pointB[3]*(3*i*(1-i)^2) + pointC[3]*(3*i*i*(1-i)) + pointD[3]*(i*i*i)
		glVertex(x,y,z)
		if px then
			glVertex(px,py,pz)
		end
		px, py, pz = x, y, z
	end
	glVertex(pointD[1],pointD[2],pointD[3])
	if px then
		glVertex(px,py,pz)
	end
end

local function GetUnitTop(unitID, x, y ,z, bonus)
	local height = Spring.GetUnitHeight(unitID)*1.5
	local top = select(2, spGetUnitVectors(unitID))
	local offX = top[1]*height
	local offY = top[2]*height
	local offZ = top[3]*height
	return x+offX, y+offY, z+offZ
end

local function DrawWire(units, spec)
	for controliee, controller in pairs(drawingUnits) do
		if spValidUnitID(controliee) and spValidUnitID(controller) then
			local point = {}
			local teamID = Spring.GetUnitTeam(controller)
			local los1 = spGetUnitLosState(controller, myTeam, false)
			local los2 = spGetUnitLosState(controliee, myTeam, false)
			if teamID and (spec or (los1 and los1.los) or (los2 and los2.los)) then
				local teamR, teamG, teamB = Spring.GetTeamColor(teamID)
				
				local xxx,yyy,zzz = Spring.GetUnitViewPosition(controller, true)
				local topX, topY, topZ = GetUnitTop(controller, xxx, yyy, zzz, 50)
				point[1] = {xxx, yyy, zzz}
				point[2] = {topX, topY, topZ}
				xxx,yyy,zzz = Spring.GetUnitViewPosition(controliee, true)
				topX, topY, topZ = GetUnitTop(controliee, xxx, yyy, zzz)
				point[3] = {topX,topY,topZ}
				point[4] = {xxx,yyy,zzz}
				gl.Color (teamR or 0.5, teamG or 0.5, teamB or 0.5, math.random()*0.1+0.3)
				gl.BeginEnd(GL_LINES, DrawBezierCurve, point[1], point[2], point[3], point[4], 10)
			end
		else
			drawingUnits[controliee] = nil
			unitCount = unitCount - 1
		end
	end
end

local function UpdateList()
	if unitCount ~= 0 then
		local _, fullview = spGetSpectatingState()
		glDeleteList(drawList)
		 
		drawAnything = true
		drawList = glCreateList(function () glBeginEnd(GL_LINES, DrawWire, drawingUnits, fullview) end)
	else
		drawAnything = false
	end
end

function widget:PlayerChanged()
	myTeam = spGetMyAllyTeamID()
end

local lastFrame = 0
function widget:DrawWorld()
	if spGetGameFrame() ~= lastFrame then
		UpdateList()
	end
	
	if drawAnything then
        
		glPushAttrib(GL.LINE_BITS)
		glLineWidth(3)
		gl.DepthTest(false)
		glCallList(drawList)
		glColor(1,1,1,1)
		glPopAttrib()
	end
end

function widget:UnitGiven(unitID, unitDefID, teamID, oldTeamID)
	local controllerID = spGetUnitRulesParam(unitID, "capture_controller")
	if drawingUnits[unitID] then
		if (not controllerID) or controllerID == -1 then
			drawingUnits[unitID] = nil
			unitCount = unitCount - 1
		else
			drawingUnits[unitID] = controllerID
		end
	elseif controllerID and controllerID ~= -1 then
		drawingUnits[unitID] = controllerID
		unitCount = unitCount + 1
	end
    Spring.Echo("game_message: current unitCount: " .. unitCount)
end

function widget:UnitDestroyed (unitID)
	local morphedTo = Spring.GetUnitRulesParam(unitID, "wasMorphedTo")
	if morphedTo then
		widget:UnitGiven(morphedTo)
	end
end